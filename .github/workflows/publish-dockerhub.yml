name: publish-docker-image

on:
  release:
    types: [published]

jobs:
  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref_name }}

      - name: Split minecraft and forge versions
        id: split
        uses: actions/github-script@v6
        env:
          REF_NAME: ${{ github.ref_name }}
        with:
          script: |
            const versions = process.env.REF_NAME.split('-')
            core.setOutput('mc_version', versions[0])

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/minecraft-server-forge
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{version}},value=${{ steps.split.outputs.mc_version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.split.outputs.mc_version }}
            type=semver,pattern={{major}},value=${{ steps.split.outputs.mc_version }}
            type=sha

      - name: Get build args from build.env
        id: extra-build-args
        run: |
          # Get env vars from build.env and remove comments, empty lines, trim
          args=$(cat build.env | sed -e 's/#.*//' -e 's/[ ^I]*$//' -e '/^$/ d')
          
          # Convert multiline to json
          args=$(printf -- '%s' "${args}" | jq --raw-input --slurp '.')
          
          echo "::set-output name=args::${args}"

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            ${{ steps.meta.outputs.labels }}
            org.opencontainers.image.documentation=${{ join(fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.url'], '/blob/main/README.md') }}
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            ${{ fromJSON(steps.extra-build-args.outputs.args) }}
