#!/command/with-contenv sh

## Defaults

SCRIPT_NAME="minecraft-server"

## Functions

# Define start procedure
start_server() {
  # Execute command in data directory for persistence
  printf -- '%s: info: starting server\n'  "${SCRIPT_NAME}"

  # Execute command in data directory for persistence
  cd "${DATA_DIR}" || exit 1

  # Redirect input from in to run.sh
  redirfd -rnb 0 "${STDIN_PIPE}" redirfd -w 3 "${STDIN_PIPE}" ./run.sh nogui &

  cd "${APP_DIR}" || exit 1

  # Get executed command pid
  CMD_PID=$!
}

# Define cleanup procedure
stop_server() {
  printf -- '%s: info: stopping server gracefully\n' "${SCRIPT_NAME}"
  # Send stop command to main process
  # NOTE: remember to set 'stop_grace_period' and 'STOP_TIMEOUT' env_var on Docker run to the desired maximum execution time needed for the main command to end
  printf -- '/stop\n' > "${STDIN_PIPE}"

  # Wait for command to end
  # exits when main command stop gracefully
  wait "${CMD_PID}"

  printf -- '%s: info: server stopped successfully\n' "${SCRIPT_NAME}"

  # Remove symlinks from data directory
  remove_symlinks

  exit 0
}

# Define create_pipe function
create_pipe() {
  printf -- '%s: info: creating input pipe at: %s\n' "${SCRIPT_NAME}" "${STDIN_PIPE}"

  # Create dir path if not exists
  STDIN_PIPE_DIR=$(dirname "${STDIN_PIPE}")
  if [ ! -d "${STDIN_PIPE_DIR}" ]; then
    mkdir -p "${STDIN_PIPE_DIR}"
  fi

  # Create fifo pipe if not exists
  if [ ! -p "${STDIN_PIPE}" ]; then
    mkfifo "${STDIN_PIPE}"
  fi
}

# Define create_symlinks function
create_symlinks() {
  printf -- '%s: info: creating symlinks in data directory\n' "${SCRIPT_NAME}"

  ln -nsf "${APP_DIR}/run.sh" "${DATA_DIR}/run.sh"
  ln -nsf "${APP_DIR}/user_jvm_args.txt" "${DATA_DIR}/user_jvm_args.txt"

  # Check if libraries dir exists
  # NOTE: needed only for forge
  if [ -d "${APP_DIR}/libraries" ]; then
    ln -nsf "${APP_DIR}/libraries" "${DATA_DIR}/libraries"
  fi
}

# Define remove_symlinks function
remove_symlinks() {
  printf -- '%s: info: removing symlinks from data directory\n' "${SCRIPT_NAME}"

  if [ -L "${DATA_DIR}/run.sh" ]; then
    rm -f "${DATA_DIR}/run.sh"
  fi

  if [ -L "${DATA_DIR}/user_jvm_args.txt" ]; then
    rm -f "${DATA_DIR}/user_jvm_args.txt"
  fi

  if [ -L "${DATA_DIR}/libraries" ]; then
    rm -f "${DATA_DIR}/libraries"
  fi
}


## Main

# Setup input pipe
create_pipe

# Create symlinks in data directory
create_symlinks

# Execute main command
start_server

# Trap SIGTERM
trap 'stop_server' TERM

# Wait for command to end
# exits when main command fails
wait "${CMD_PID}"

printf -- '%s: error: server stopped unexpectedly\n' "${SCRIPT_NAME}"

# Remove symlinks from data directory
remove_symlinks

exit 1
